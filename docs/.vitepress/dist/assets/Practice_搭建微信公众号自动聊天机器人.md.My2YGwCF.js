import{_ as a,c as i,o as t,ae as e}from"./chunks/framework.BTjre2ya.js";const p="/web/Practice/ChatBot/1.png",l="/web/Practice/ChatBot/2.png",n="/web/Practice/ChatBot/3.png",h="/web/Practice/ChatBot/4.png",d="/web/Practice/ChatBot/5.png",o="/web/Practice/ChatBot/6.png",c="/web/Practice/ChatBot/7.png",r="/web/Practice/ChatBot/8.jpg",k="/web/Practice/ChatBot/9.png",g="/web/Practice/ChatBot/10.png",F="/web/Practice/ChatBot/11.png",b="/web/Practice/ChatBot/12.png",y="/web/Practice/ChatBot/13.png",x=JSON.parse('{"title":"使用LangBot和Dify定制化搭建微信公众号自动聊天机器人","description":"","frontmatter":{},"headers":[],"relativePath":"Practice/搭建微信公众号自动聊天机器人.md","filePath":"Practice/搭建微信公众号自动聊天机器人.md"}'),u={name:"Practice/搭建微信公众号自动聊天机器人.md"};function C(m,s,B,v,_,E){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="使用langbot和dify定制化搭建微信公众号自动聊天机器人" tabindex="-1">使用LangBot和Dify定制化搭建微信公众号自动聊天机器人 <a class="header-anchor" href="#使用langbot和dify定制化搭建微信公众号自动聊天机器人" aria-label="Permalink to &quot;使用LangBot和Dify定制化搭建微信公众号自动聊天机器人&quot;">​</a></h1><h2 id="以下操作均在云服务器上进行-如果在本地环境中需要内网穿透才可以连接到微信公众平台。" tabindex="-1">以下操作均在云服务器上进行，如果在本地环境中需要内网穿透才可以连接到微信公众平台。 <a class="header-anchor" href="#以下操作均在云服务器上进行-如果在本地环境中需要内网穿透才可以连接到微信公众平台。" aria-label="Permalink to &quot;以下操作均在云服务器上进行，如果在本地环境中需要内网穿透才可以连接到微信公众平台。&quot;">​</a></h2><h2 id="_1-环境准备" tabindex="-1">1. 环境准备 <a class="header-anchor" href="#_1-环境准备" aria-label="Permalink to &quot;1. 环境准备&quot;">​</a></h2><h3 id="_1-1-修改hosts文件-直接访问github的cdn节点-可选" tabindex="-1">1.1 修改Hosts文件，直接访问GitHub的CDN节点（可选） <a class="header-anchor" href="#_1-1-修改hosts文件-直接访问github的cdn节点-可选" aria-label="Permalink to &quot;1.1 修改Hosts文件，直接访问GitHub的CDN节点（可选）&quot;">​</a></h3><p>使用root账户打开hosts文件：</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/hosts</span></span></code></pre></div><p>在hosts文件中添加以下内容：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>140.82.112.3  github.com</span></span></code></pre></div><p>刷新DNS缓存:</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemd-resolved</span></span></code></pre></div><h3 id="_1-1-安装dify" tabindex="-1">1.1 安装Dify <a class="header-anchor" href="#_1-1-安装dify" aria-label="Permalink to &quot;1.1 安装Dify&quot;">​</a></h3><p>克隆源码至本地环境:</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/langgenius/dify.git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.4.3</span></span></code></pre></div><p>进入源码的docker目录:</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dify/docker</span></span></code></pre></div><p>复制环境配置文件:</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span></code></pre></div><p>启动Docker容器:</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><h3 id="_1-2-安装langbot" tabindex="-1">1.2 安装LangBot <a class="header-anchor" href="#_1-2-安装langbot" aria-label="Permalink to &quot;1.2 安装LangBot&quot;">​</a></h3><p>克隆源码至本地环境:</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/RockChinQ/LangBot</span></span></code></pre></div><p>进入源码的docker目录:</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LangBot</span></span></code></pre></div><p>启动Docker容器:</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span></span></code></pre></div><h3 id="_1-3-安装caddy" tabindex="-1">1.3 安装caddy <a class="header-anchor" href="#_1-3-安装caddy" aria-label="Permalink to &quot;1.3 安装caddy&quot;">​</a></h3><p>在终端输入以下内容:</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debian-keyring</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debian-archive-keyring</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-transport-https</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1sLf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://dl.cloudsmith.io/public/caddy/stable/gpg.key&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --dearmor</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/share/keyrings/caddy-stable-archive-keyring.gpg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1sLf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/apt/sources.list.d/caddy-stable.list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> caddy</span></span></code></pre></div><h3 id="_1-4-注册微信公众号" tabindex="-1">1.4 注册微信公众号 <a class="header-anchor" href="#_1-4-注册微信公众号" aria-label="Permalink to &quot;1.4 注册微信公众号&quot;">​</a></h3><p>微信公众平台官网注册：<a href="https://mp.weixin.qq.com/" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/</a>。</p><h2 id="_2-部署微信公众号机器人" tabindex="-1">2. 部署微信公众号机器人 <a class="header-anchor" href="#_2-部署微信公众号机器人" aria-label="Permalink to &quot;2. 部署微信公众号机器人&quot;">​</a></h2><h3 id="_2-1-获取appid与appsecret-并设置白名单" tabindex="-1">2.1 获取AppID与AppSecret，并设置白名单 <a class="header-anchor" href="#_2-1-获取appid与appsecret-并设置白名单" aria-label="Permalink to &quot;2.1 获取AppID与AppSecret，并设置白名单&quot;">​</a></h3><p><img src="`+p+'" alt=""></p><h3 id="_2-2-配置langbot" tabindex="-1">2.2 配置LangBot <a class="header-anchor" href="#_2-2-配置langbot" aria-label="Permalink to &quot;2.2 配置LangBot&quot;">​</a></h3><p>登录LangBot的WebUI界面，默认端口号为5300，在本地浏览器中输入：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>23.23.43.56:5300 # 修改为自己的公网ip + 5300端口号</span></span></code></pre></div><p>新建机器人，按照下图配置（<strong>不要修改端口号</strong>）：</p><p><img src="'+l+'" alt=""><img src="'+n+`" alt=""></p><p>配置完成后<strong>开启</strong>机器人。</p><h3 id="_2-3-配置caddy反向代理" tabindex="-1">2.3 配置Caddy反向代理 <a class="header-anchor" href="#_2-3-配置caddy反向代理" aria-label="Permalink to &quot;2.3 配置Caddy反向代理&quot;">​</a></h3><p>修改Caddy的配置文件，默认路径为：/etc/caddy/Caddyfile。 在文件中添加以下内容：</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">23.23.43.56:80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 修改为自己的公网ip + 80端口号</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    reverse_proxy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:2287</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>重启Caddy服务:</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> caddy</span></span></code></pre></div><h3 id="_2-4-配置微信公众号" tabindex="-1">2.4 配置微信公众号 <a class="header-anchor" href="#_2-4-配置微信公众号" aria-label="Permalink to &quot;2.4 配置微信公众号&quot;">​</a></h3><p>登录微信公众平台，进入公众号设置，将服务器配置中的URL填写为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://23.23.43.56/callback/command # 修改为自己的公网ip</span></span></code></pre></div><p>在服务器配置中的Token填写为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>token # 这里的Token为LangBot的Token</span></span></code></pre></div><p>在服务器配置中的EncodingAESKey填写为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FuCy7LfE1LCrXEmCaTetUMjyZFeMy6W1GBvoe0uJE1O # 这里的EncodingAESKey与LangBot的EncodingAESKey对应，可以在微信公众平台生成</span></span></code></pre></div><p>消息加解密方式选择<strong>安全模式</strong>。</p><p><img src="`+h+'" alt=""></p><p>提交后若显示错误，建议仔细检查LangBot与公众管理平台中配置的参数是否对应。</p><h3 id="_2-5-测试机器人" tabindex="-1">2.5 测试机器人 <a class="header-anchor" href="#_2-5-测试机器人" aria-label="Permalink to &quot;2.5 测试机器人&quot;">​</a></h3><p>在LangBot的WebUI界面中，点击模型配置，添加一个LLM模型。</p><p><img src="'+d+'" alt=""></p><p>点击流水线，选择chatPipeline，配置AI能力：</p><p><img src="'+o+'" alt=""></p><p>可以点击对话，测试LLM模型是否接入成功。</p><p><img src="'+c+'" alt=""></p><p>在公众号中输入“你好”，测试机器人是否能正常工作。</p><p><img src="'+r+'" alt=""></p><h2 id="_3-使用dify定制化机器人-以chatflow为例" tabindex="-1">3. 使用Dify定制化机器人（以ChatFlow为例） <a class="header-anchor" href="#_3-使用dify定制化机器人-以chatflow为例" aria-label="Permalink to &quot;3. 使用Dify定制化机器人（以ChatFlow为例）&quot;">​</a></h2><h3 id="_3-1-创建chatflow应用" tabindex="-1">3.1 创建ChatFlow应用 <a class="header-anchor" href="#_3-1-创建chatflow应用" aria-label="Permalink to &quot;3.1 创建ChatFlow应用&quot;">​</a></h3><p>新建空白应用</p><p><img src="'+k+'" alt=""></p><p>将LLM模块中的模型改为chat型的模型，比如deepseek-v3。</p><p><img src="'+g+'" alt=""></p><p>点击发布更新-&gt;访问API</p><p><img src="'+F+'" alt=""></p><p>创建API密钥</p><p><img src="'+b+'" alt=""></p><p>在LangBot的WebUI界面中，点击流水线更改ChatPipeline的配置：</p><p><img src="'+y+'" alt=""></p><p>保存后可以点击<strong>对话</strong>测试是否成功调用Dify应用。</p><p><strong>测试通过后可以直接在公众号中输入问题与机器人进行对话。</strong></p>',78)]))}const P=a(u,[["render",C]]);export{x as __pageData,P as default};
