import{_ as e,c as t,o as d,ae as c}from"./chunks/framework.BTjre2ya.js";const u=JSON.parse('{"title":"常用Shell命令","description":"","frontmatter":{},"headers":[],"relativePath":"Linux/Shell.md","filePath":"Linux/Shell.md"}'),r={name:"Linux/Shell.md"};function l(i,o,n,a,s,g){return d(),t("div",null,o[0]||(o[0]=[c('<h1 id="常用shell命令" tabindex="-1">常用Shell命令 <a class="header-anchor" href="#常用shell命令" aria-label="Permalink to &quot;常用Shell命令&quot;">​</a></h1><h3 id="文件与目录操作" tabindex="-1">文件与目录操作 <a class="header-anchor" href="#文件与目录操作" aria-label="Permalink to &quot;文件与目录操作&quot;">​</a></h3><ul><li><strong><code>ls</code></strong>：用于显示目录内容。搭配参数使用，功能更丰富，例如<code>ls -l</code>能展示详细信息，<code>ls -a</code>可显示隐藏文件。</li><li><strong><code>cd [目录名]</code></strong>：实现目录切换。比如<code>cd /home</code>是切换到home目录，<code>cd ..</code>则是返回上级目录。</li><li><strong><code>pwd</code></strong>：显示当前工作目录的路径。</li><li><strong><code>mkdir [目录名]</code></strong>：创建新目录，像<code>mkdir new_folder</code>就是创建一个名为new_folder的新目录。</li><li><strong><code>rm [文件/目录]</code></strong>：删除文件或目录。删除目录时需加上<code>-r</code>参数，例如<code>rm -r old_folder</code>；若要强制删除，可使用<code>-f</code>参数，如<code>rm -rf unwanted_folder</code>。</li><li><strong><code>cp [源文件] [目标文件]</code></strong>：复制文件或目录。复制目录时同样需要<code>-r</code>参数，例如<code>cp -r source_dir dest_dir</code>。</li><li><strong><code>mv [源文件] [目标文件]</code></strong>：移动文件或重命名文件。比如<code>mv file1.txt docs/</code>是将file1.txt移动到docs目录下，<code>mv old_name.txt new_name.txt</code>则是将文件重命名。</li></ul><h3 id="文件内容查看与编辑" tabindex="-1">文件内容查看与编辑 <a class="header-anchor" href="#文件内容查看与编辑" aria-label="Permalink to &quot;文件内容查看与编辑&quot;">​</a></h3><ul><li><strong><code>cat [文件]</code></strong>：一次性显示文件的全部内容。</li><li><strong><code>more [文件]</code></strong>：分屏显示文件内容，适合查看较长的文件。</li><li><strong><code>less [文件]</code></strong>：与<code>more</code>类似，但功能更强大，支持向前和向后翻页等操作。</li><li><strong><code>head [文件]</code></strong>：显示文件的前几行，默认显示前10行，可通过<code>-n</code>参数指定行数，如<code>head -n 5 file.txt</code>。</li><li><strong><code>tail [文件]</code></strong>：显示文件的后几行，默认显示后10行，同样可通过<code>-n</code>参数指定行数，如<code>tail -n 3 file.txt</code>；使用<code>-f</code>参数还能实时监控文件的更新情况。</li><li><strong><code>nano [文件]</code></strong>：简单易用的文本编辑器，适合初学者使用。</li><li><strong><code>vim [文件]</code></strong>：功能强大但操作相对复杂的文本编辑器，有多种模式，需要一定的学习成本。</li></ul><h3 id="文件搜索" tabindex="-1">文件搜索 <a class="header-anchor" href="#文件搜索" aria-label="Permalink to &quot;文件搜索&quot;">​</a></h3><ul><li><strong><code>grep [关键词] [文件]</code></strong>：在文件中搜索包含指定关键词的行，例如<code>grep &quot;error&quot; log.txt</code>。</li><li><strong><code>find [路径] [条件]</code></strong>：基于指定条件在文件系统中查找文件。比如<code>find /home -name &quot;*.txt&quot;</code>是在/home目录下查找所有扩展名为.txt的文件。</li></ul><h3 id="系统信息" tabindex="-1">系统信息 <a class="header-anchor" href="#系统信息" aria-label="Permalink to &quot;系统信息&quot;">​</a></h3><ul><li><strong><code>uname -a</code></strong>：显示系统的详细信息，包括内核版本、主机名等。</li><li><strong><code>df -h</code></strong>：查看磁盘空间使用情况，以人类可读的格式显示。</li><li><strong><code>free -h</code></strong>：查看内存使用情况，同样以人类可读的格式呈现。</li><li><strong><code>top</code></strong>：实时监控系统进程和资源使用情况。</li><li><strong><code>htop</code></strong>：功能更丰富的系统监控工具，界面更加直观。</li><li><strong><code>ps aux</code></strong>：显示当前运行的所有进程信息。</li></ul><h3 id="用户与权限" tabindex="-1">用户与权限 <a class="header-anchor" href="#用户与权限" aria-label="Permalink to &quot;用户与权限&quot;">​</a></h3><ul><li><strong><code>whoami</code></strong>：显示当前登录的用户名。</li><li><strong><code>id</code></strong>：查看用户的身份信息，包括用户ID和组ID等。</li><li><strong><code>chmod [权限] [文件/目录]</code></strong>：修改文件或目录的权限。例如<code>chmod +x script.sh</code>是为script.sh文件添加可执行权限。</li><li><strong><code>chown [用户]:[组] [文件/目录]</code></strong>：更改文件或目录的所有者和所属组。</li></ul><h3 id="网络" tabindex="-1">网络 <a class="header-anchor" href="#网络" aria-label="Permalink to &quot;网络&quot;">​</a></h3><ul><li><strong><code>ping [主机名/IP]</code></strong>：测试与目标主机的网络连通性。</li><li><strong><code>ifconfig</code></strong>：显示网络接口的配置信息。</li><li><strong><code>ip addr</code></strong>：查看和配置网络接口，是<code>ifconfig</code>的替代命令。</li><li><strong><code>netstat -tulpn</code></strong>：显示网络连接、路由表和网络接口信息。</li><li><strong><code>curl [URL]</code></strong>：用于传输数据，支持多种协议，常用来测试API或下载文件。</li><li><strong><code>wget [URL]</code></strong>：从网络上下载文件。</li></ul><h3 id="压缩与归档" tabindex="-1">压缩与归档 <a class="header-anchor" href="#压缩与归档" aria-label="Permalink to &quot;压缩与归档&quot;">​</a></h3><ul><li><strong><code>tar -cvf [归档文件名.tar] [文件/目录]</code></strong>：创建tar归档文件，例如<code>tar -cvf backup.tar documents/</code>。</li><li><strong><code>tar -xvf [归档文件名.tar]</code></strong>：解压tar归档文件。</li><li><strong><code>tar -zcvf [归档文件名.tar.gz] [文件/目录]</code></strong>：创建gzip压缩的tar归档文件。</li><li><strong><code>tar -zxvf [归档文件名.tar.gz]</code></strong>：解压gzip压缩的tar归档文件。</li><li><strong><code>zip -r [压缩文件名.zip] [文件/目录]</code></strong>：创建zip压缩文件。</li><li><strong><code>unzip [压缩文件名.zip]</code></strong>：解压zip压缩文件。</li></ul><h3 id="其他实用命令" tabindex="-1">其他实用命令 <a class="header-anchor" href="#其他实用命令" aria-label="Permalink to &quot;其他实用命令&quot;">​</a></h3><ul><li><strong><code>echo [内容]</code></strong>：在终端输出指定内容，也可用于将内容输出到文件，如<code>echo &quot;Hello&quot; &gt; test.txt</code>。</li><li><strong><code>|</code>（管道）</strong>：将一个命令的输出作为另一个命令的输入，例如<code>ls -l | grep &quot;txt&quot;</code>。</li><li><strong><code>&gt;</code>和<code>&gt;&gt;</code></strong>：重定向命令的输出。<code>&gt;</code>会覆盖文件原有内容，<code>&gt;&gt;</code>则是追加到文件末尾。</li><li><strong><code>history</code></strong>：显示历史命令记录。</li><li><strong><code>man [命令]</code></strong>：查看命令的手册页，获取详细的使用说明。</li><li><strong><code>alias</code></strong>：为命令创建别名，简化复杂命令的输入，例如<code>alias ll=&#39;ls -l&#39;</code>。</li></ul><h1 id="未完待续" tabindex="-1">未完待续~ 🎉 <a class="header-anchor" href="#未完待续" aria-label="Permalink to &quot;未完待续~ :tada:&quot;">​</a></h1>',18)]))}const m=e(r,[["render",l]]);export{u as __pageData,m as default};
