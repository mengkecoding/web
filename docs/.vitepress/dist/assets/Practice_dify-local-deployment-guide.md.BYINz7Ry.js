import{_ as a,c as o,o as t,ae as i}from"./chunks/framework.BjlC_BXf.js";const s="/Practice/dify-local-deployment-guide/2.1.png",r="/Practice/dify-local-deployment-guide/2.2.png",l="/Practice/dify-local-deployment-guide/2.3.png",c="/Practice/dify-local-deployment-guide/2.4.png",d="/Practice/dify-local-deployment-guide/2.5.png",n="/Practice/dify-local-deployment-guide/2.6.png",p="/Practice/dify-local-deployment-guide/2.7.png",h="/Practice/dify-local-deployment-guide/2.8.png",m="/Practice/dify-local-deployment-guide/2.9.png",u="/Practice/dify-local-deployment-guide/3.1.png",g="/Practice/dify-local-deployment-guide/3.2.png",f="/Practice/dify-local-deployment-guide/3.3.png",_="/Practice/dify-local-deployment-guide/3.4.png",k="/Practice/dify-local-deployment-guide/3.5.png",W=JSON.parse('{"title":"手把手教你部署 Dify 到本地环境(Windows系统)","description":"","frontmatter":{},"headers":[],"relativePath":"Practice/dify-local-deployment-guide.md","filePath":"Practice/dify-local-deployment-guide.md"}'),y={name:"Practice/dify-local-deployment-guide.md"};function b(P,e,q,D,w,v){return t(),o("div",null,e[0]||(e[0]=[i('<h1 id="手把手教你部署-dify-到本地环境-windows系统" tabindex="-1">手把手教你部署 Dify 到本地环境(Windows系统) <a class="header-anchor" href="#手把手教你部署-dify-到本地环境-windows系统" aria-label="Permalink to &quot;手把手教你部署 Dify 到本地环境(Windows系统)&quot;">​</a></h1><h2 id="_1-为什么选择docker部署" tabindex="-1">1. 为什么选择docker部署 <a class="header-anchor" href="#_1-为什么选择docker部署" aria-label="Permalink to &quot;1. 为什么选择docker部署&quot;">​</a></h2><h3 id="_1-1-一键部署-彻底避免环境问题" tabindex="-1">1.1 一键部署，彻底避免环境问题 <a class="header-anchor" href="#_1-1-一键部署-彻底避免环境问题" aria-label="Permalink to &quot;1.1 一键部署，彻底避免环境问题&quot;">​</a></h3><p>Docker 镜像 已包含 Dify 所需的所有依赖（操作系统、Python 环境、库文件），无需手动安装 Python、Node.js、PostgreSQL 等组件，杜绝版本冲突。</p><h3 id="_1-2-快速搭建完整服务栈" tabindex="-1">1.2 快速搭建完整服务栈 <a class="header-anchor" href="#_1-2-快速搭建完整服务栈" aria-label="Permalink to &quot;1.2 快速搭建完整服务栈&quot;">​</a></h3><p>Dify 官方提供 docker-compose.yml 文件，通过容器编排：</p><ul><li>自动创建网络，连接多个容器（Web 服务 + DB + Redis + 后台任务）。</li><li>无需分别配置各组件间的通信（如 PostgreSQL 连接地址、Redis 端口）。</li></ul><p>传统部署需手动安装并配置 4-5 个服务，Docker 只需 1 条命令。</p><h3 id="_1-3-资源隔离与安全性" tabindex="-1">1.3 资源隔离与安全性 <a class="header-anchor" href="#_1-3-资源隔离与安全性" aria-label="Permalink to &quot;1.3 资源隔离与安全性&quot;">​</a></h3><p>Dify 的 PostgreSQL、Redis 等服务运行在独立容器中，与宿主机隔离。即使 Dify 被攻击，数据库不会直接暴露在公网（通过 Docker 网络内部通信）。</p><h2 id="_2-环境准备" tabindex="-1">2. 环境准备 <a class="header-anchor" href="#_2-环境准备" aria-label="Permalink to &quot;2. 环境准备&quot;">​</a></h2><h3 id="_2-1-启用wsl所需windows功能" tabindex="-1">2.1 启用WSL所需Windows功能 <a class="header-anchor" href="#_2-1-启用wsl所需windows功能" aria-label="Permalink to &quot;2.1 启用WSL所需Windows功能&quot;">​</a></h3><p>勾选<strong>Windows虚拟机监控程序平台</strong>和<strong>适用于Linux的Windows子系统</strong></p><p><img src="'+s+'" alt=""></p><h3 id="_2-2-安装docker-desktop" tabindex="-1">2.2 安装Docker Desktop <a class="header-anchor" href="#_2-2-安装docker-desktop" aria-label="Permalink to &quot;2.2 安装Docker Desktop&quot;">​</a></h3><p>下载地址：<a href="https://www.docker.com/products/docker-desktop/" target="_blank" rel="noreferrer">https://www.docker.com/products/docker-desktop/</a></p><p><img src="'+r+'" alt=""></p><h3 id="_2-3-安装wsl" tabindex="-1">2.3 安装WSL <a class="header-anchor" href="#_2-3-安装wsl" aria-label="Permalink to &quot;2.3 安装WSL&quot;">​</a></h3><p>在管理员模式下打开Windows命令提示符，输入<code>wsl --install</code>。 官方文档地址：<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install" target="_blank" rel="noreferrer">https://learn.microsoft.com/zh-cn/windows/wsl/install</a></p><p><img src="'+l+'" alt=""></p><h3 id="_2-4-配置镜像加速" tabindex="-1">2.4 配置镜像加速 <a class="header-anchor" href="#_2-4-配置镜像加速" aria-label="Permalink to &quot;2.4 配置镜像加速&quot;">​</a></h3><p>进入华为<a href="https://console.huaweicloud.com/swr/" target="_blank" rel="noreferrer">容器镜像服务控制台</a>,点击镜像中心-&gt;镜像加速器</p><p><img src="'+c+'" alt=""></p><p>复制下图红框内的内容</p><p><img src="'+d+'" alt=""></p><p>打开docker Desktop，点击设置-&gt;Docker Engine，将复制的内容粘贴到下图的红框中，点击Apply &amp; restart。</p><p><img src="'+n+'" alt=""></p><h3 id="_2-4-结合wsl与docker-desktop" tabindex="-1">2.4 结合WSL与Docker Desktop <a class="header-anchor" href="#_2-4-结合wsl与docker-desktop" aria-label="Permalink to &quot;2.4 结合WSL与Docker Desktop&quot;">​</a></h3><p>进入设置-&gt;Resources-&gt;WSL integration,勾选Ubuntu，点击Apply &amp; restart。</p><p><img src="'+p+'" alt=""></p><p>运行Ubuntu子系统</p><p><img src="'+h+'" alt=""></p><p>验证docker是否工作正常，输入<code>docker --version</code>。</p><p><img src="'+m+'" alt=""></p><h2 id="_3-本地化部署dify" tabindex="-1">3. 本地化部署Dify <a class="header-anchor" href="#_3-本地化部署dify" aria-label="Permalink to &quot;3. 本地化部署Dify&quot;">​</a></h2><h3 id="_3-1-安装dify" tabindex="-1">3.1 安装dify <a class="header-anchor" href="#_3-1-安装dify" aria-label="Permalink to &quot;3.1 安装dify&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone https://github.com/langgenius/dify.git --branch 1.4.2</span></span></code></pre></div><p><strong>（由于github的国内访问不稳定，可能会出现镜像拉取失败的问题，建议使用加速器加速一下。steam++加速器：<a href="https://steampp.net/" target="_blank" rel="noreferrer">https://steampp.net/</a>）</strong><img src="'+u+'" alt=""></p><h3 id="_3-2-启动dify" tabindex="-1">3.2 启动Dify <a class="header-anchor" href="#_3-2-启动dify" aria-label="Permalink to &quot;3.2 启动Dify&quot;">​</a></h3><h4 id="_3-2-1-打开dify源码的docker目录" tabindex="-1">3.2.1 打开Dify源码的Docker目录 <a class="header-anchor" href="#_3-2-1-打开dify源码的docker目录" aria-label="Permalink to &quot;3.2.1 打开Dify源码的Docker目录&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd dify/docker</span></span></code></pre></div><h4 id="_3-2-2-复制环境配置文件" tabindex="-1">3.2.2 复制环境配置文件 <a class="header-anchor" href="#_3-2-2-复制环境配置文件" aria-label="Permalink to &quot;3.2.2 复制环境配置文件&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cp .env.example .env</span></span></code></pre></div><h4 id="_3-2-3-启动docker容器-目前的版本都是docker-compose-v2-如果是旧版本请参考官方文档" tabindex="-1">3.2.3 启动Docker容器(目前的版本都是Docker Compose V2，如果是旧版本请参考官方文档) <a class="header-anchor" href="#_3-2-3-启动docker容器-目前的版本都是docker-compose-v2-如果是旧版本请参考官方文档" aria-label="Permalink to &quot;3.2.3 启动Docker容器(目前的版本都是Docker Compose V2，如果是旧版本请参考官方文档)&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker compose up -d</span></span></code></pre></div><p><img src="'+g+'" alt=""></p><h4 id="_3-2-4-检查所有容器是否正常运行" tabindex="-1">3.2.4 检查所有容器是否正常运行 <a class="header-anchor" href="#_3-2-4-检查所有容器是否正常运行" aria-label="Permalink to &quot;3.2.4 检查所有容器是否正常运行&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker compose ps</span></span></code></pre></div><p><img src="'+f+'" alt=""></p><h3 id="_3-3-访问dify" tabindex="-1">3.3 访问Dify <a class="header-anchor" href="#_3-3-访问dify" aria-label="Permalink to &quot;3.3 访问Dify&quot;">​</a></h3><h4 id="_3-3-1-在浏览器中输入localhost-进入管理员账户设置页面" tabindex="-1">3.3.1 在浏览器中输入<code>localhost</code>，进入管理员账户设置页面 <a class="header-anchor" href="#_3-3-1-在浏览器中输入localhost-进入管理员账户设置页面" aria-label="Permalink to &quot;3.3.1 在浏览器中输入`localhost`，进入管理员账户设置页面&quot;">​</a></h4><p><img src="'+_+'" alt=""></p><h4 id="_3-3-2-设置成功后进行登录-进入到dify页面-本地化部署dify完成。" tabindex="-1">3.3.2 设置成功后进行登录，进入到Dify页面，本地化部署Dify完成。 <a class="header-anchor" href="#_3-3-2-设置成功后进行登录-进入到dify页面-本地化部署dify完成。" aria-label="Permalink to &quot;3.3.2 设置成功后进行登录，进入到Dify页面，本地化部署Dify完成。&quot;">​</a></h4><p><img src="'+k+'" alt=""></p>',54)]))}const S=a(y,[["render",b]]);export{W as __pageData,S as default};
